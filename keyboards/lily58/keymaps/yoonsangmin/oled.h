#pragma once
#include QMK_KEYBOARD_H
#include "os_detection.h"

static const char PROGMEM qwerty[] = {
    0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x30, 0xB0, 0xD8, 0x58, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x30, 0x30, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x0E, 0x03, 0x00, 0x00, 0x00, 0xF8, 0x04, 0x02, 0x02, 0x72, 0x72, 0x02, 0x02, 0x04, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x30, 0x30, 0x30, 0x1E, 0x1E, 0x30, 0x30, 0x30, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0C, 0x0C, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00,
};

static const char PROGMEM game[] = {
    0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x30, 0xB0, 0xD8, 0x58, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x30, 0x30, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x0E, 0x03, 0x78, 0x8C, 0x72, 0x89, 0x25, 0x75, 0x25, 0x2A, 0x0A, 0x05, 0x05, 0x05, 0x89, 0x72, 0x84, 0x78, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x09, 0x12, 0x14, 0x28, 0x28, 0x14, 0x12, 0x09, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0C, 0x0C, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00,
};

static const char PROGMEM navi[] = {
    0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x30, 0xB0, 0xD8, 0x58, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x30, 0x30, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x0E, 0x03, 0x00, 0x00, 0x00, 0xFC, 0x02, 0x02, 0x02, 0x0C, 0x3C, 0x02, 0x02, 0x02, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x38, 0x38, 0x38, 0x1F, 0x1C, 0x38, 0x38, 0x38, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0C, 0x0C, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00,
};

static const char PROGMEM func[] = {
    0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x30, 0xB0, 0xD8, 0x58, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x30, 0x30, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x0E, 0x03, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x02, 0x02, 0x02, 0x32, 0x32, 0x32, 0xF2, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x38, 0x38, 0x38, 0x1F, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0C, 0x0C, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00,
};

static const char PROGMEM mouse[] = {
    0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x30, 0xB0, 0xD8, 0x58, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x30, 0x30, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x0E, 0x03, 0x00, 0x00, 0xFC, 0x02, 0x02, 0x02, 0x8C, 0x10, 0x10, 0x8C, 0x02, 0x02, 0x02, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x38, 0x38, 0x38, 0x1F, 0x07, 0x07, 0x1F, 0x38, 0x38, 0x38, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0C, 0x0C, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00,
};

static const char PROGMEM number[] = {
    0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0x30, 0xB0, 0xD8, 0x58, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x30, 0x30, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x0E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xE4, 0x02, 0x02, 0x02, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x38, 0x38, 0x38, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0C, 0x0C, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00,
};

void render_braket(void)
{
    oled_write_P(PSTR("====="), false);

}

void render_division(void)
{
    oled_write_P(PSTR("-----"), false);

}

void render_left_layer(void)
{
    oled_write_P(PSTR("Layer"), false);

    if (layer_state_is(_MOUSE)) {
        oled_write_raw_P(mouse, 128);
    } else if (layer_state_is(_NUMBER)) {
        oled_write_raw_P(number, 128);
    } else if (layer_state_is(_GAME)) {
        oled_write_raw_P(game, 128);
    } else {
        oled_write_raw_P(qwerty, 128);
    }
}

void render_right_layer(void)
{
    oled_write_P(PSTR("Layer"), false);

    if (layer_state_is(_NAVIGATION)) {
        oled_write_raw_P(navi, 128);
    } else if (layer_state_is(_FUNCTION)) {
        oled_write_raw_P(func, 128);
    } else if (layer_state_is(_RIGHT_NUMBER)) {
        oled_write_raw_P(number, 128);
    } else {
        oled_write_raw_P(qwerty, 128);
    }
}

void render_stats(void)
{
    oled_write_P(PSTR("Stats"), false);
    
    // Host Keyboard LED Status
    led_t led_state = host_keyboard_led_state();
    oled_write_P(led_state.num_lock ? PSTR("*") : PSTR("."), false);
    oled_write_P(PSTR(" "), false);
    oled_write_P(led_state.caps_lock ? PSTR("*") : PSTR("."), false);
    oled_write_P(PSTR(" "), false);
    oled_write_P(led_state.scroll_lock ? PSTR("*") : PSTR("."), false);
}

void render_redo_mod(os_variant_t host_os, bool isDefaultRedoMode)
{
    oled_write_P(PSTR("Redo "), false);

    if (host_os == OS_MACOS || host_os == OS_IOS) {
        oled_write_P(PSTR("CMD+Z"), false);
    } else {
        if (isDefaultRedoMode) {
            oled_write_P(PSTR("CTL+Z"), false);
        } else {
            oled_write_P(PSTR("CTL+y"), false);
        }
    }
}